---
- name: manage AppArmor settings.
  when: ansible_apparmor.status == "enabled" and
        aspects_mysql_server_disable_apparmor
  include_tasks: "apparmor.yml"
  tags:
  - aspects_mysql_server

- name: "Include tasks to initialize a new server."
  include_tasks: initialize.yml
  when: aspects_mysql_server_init
  tags:
  - aspects_mysql_server

- name: "Include tasks to change the aspectsadmin user password."
  include_tasks: changeAspectsadminPassword.yml
  when: aspects_mysql_server_aspectsadmin_password_change
  tags:
  - aspects_mysql_server
  - aspects_mysql_server_change_aspectsadmin_password

- name: "Include tasks to configure the server."
  include_tasks: configure.yml
  tags:
  - aspects_mysql_server

- name: "Add or remove databases based on state."
  when: aspects_mysql_server_databases is defined
  mysql_db:
    state: "{{ item.1.state }}"
    name: "{{ item.1.name }}"
    login_host: "localhost"
    login_user: "aspectsadmin"
    login_password: "{{ aspects_mysql_server_aspectsadmin_password }}"
    collation: "{{ item.1.collation }}"
    encoding: "{{ item.1.encoding }}"
  loop: "{{ aspects_mysql_server_databases | default({}) | dictsort }}"
  tags:
    - aspects_mysql_server
    - aspects_mysql_server_databases

# Users have to be after databases since you can't give users
# permissions on databases that don't exist.
- name: "Add or remove users based on state."
  when: aspects_mysql_server_users is defined
  mysql_user:
    state: "{{ item.1.state }}"
    name: "{{ item.1.name }}"
    password: "{{ item.1.password }}"
    host: "{{ item.1.host }}"
    priv: "{{ item.1.priv }}"
    login_host: "localhost"
    login_user: "aspectsadmin"
    login_password: "{{ aspects_mysql_server_aspectsadmin_password }}"
  loop: "{{ aspects_mysql_server_users | default({}) | dictsort }}"
  tags:
    - aspects_mysql_server
    - aspects_mysql_server_users